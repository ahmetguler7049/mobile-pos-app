"""
Django settings for pos_project project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from decouple import config
import django_heroku
import dj_database_url
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG') == 'TRUE'

ALLOWED_HOSTS = ["http://127.0.0.1:8000", "http://localhost:3000", "https://reactor.banapos.com",
                 "https://banapos-backend.herokuapp.com", "https://api.banapos.com", 'https://dev.banapos.com',
                 "https://uat.banapos.com"]

env_file = os.path.join(BASE_DIR, ".env")
ENV = False
if os.path.isfile(env_file):
    ENV = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'api',
    'django_celery_beat',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'whitenoise.runserver_nostatic',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pos_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pos_project.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Istanbul'

USE_I18N = True

USE_TZ = True

DATETIME_FORMAT = '%d-%m-%Y %H:%M:%S'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

django_heroku.settings(locals())

STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

if ENV:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',

            'NAME': config('DB_NAME'),

            'USER': config('DB_USER'),

            'PASSWORD': config('DB_PASSWORD'),

            'HOST': 'localhost',

            'PORT': '5432',
        }
        # {
        #     'ENGINE': 'django.db.backends.postgresql_psycopg2',
        #
        #     'NAME': "d1o1f03i3pe75m",
        #
        #     'USER': "siilnbjqoyltmd",
        #
        #     'PASSWORD': "fc2ed06bc821eb65a4697e39ef3280e32f98e59824e5445d9a553e38efe790c4",
        #
        #     'HOST': 'ec2-54-76-43-89.eu-west-1.compute.amazonaws.com',
        #
        #     'PORT': '5432',
        # }
    }
else:
    DATABASES = dict()
    DATABASES['default'] = dj_database_url.config(conn_max_age=10)

CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = ["http://127.0.0.1:8000", "http://localhost:3000", 'https://banapos.com',
                         "https://banapos-backend.herokuapp.com", "https://api.banapos.com", 'https://dev.banapos.com',
                         "https://reactor.banapos.com", "https://uat.banapos.com"]
CSRF_TRUSTED_ORIGINS = ['https://api.banapos.com', 'https://dev.banapos.com', 'https://banapos.com',
                        "https://uat.banapos.com"]

AUTH_USER_MODEL = "api.CustomUser"

DEFAULT_RENDERER_CLASSES = [
    'rest_framework.renderers.JSONRenderer',
]

if ENV:
    DEFAULT_RENDERER_CLASSES += (
        'rest_framework.renderers.BrowsableAPIRenderer',
    )

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_RENDERER_CLASSES': DEFAULT_RENDERER_CLASSES,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ]
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=10),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=10),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'user_id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

# ---------------------------- SENTRY ----------------------------
if not DEBUG:
    import sentry_sdk
    from sentry_sdk.integrations.celery import CeleryIntegration
    from sentry_sdk.integrations.django import DjangoIntegration
    from sentry_sdk.integrations.redis import RedisIntegration

    sentry_sdk.init(
        dsn=config("SENTRY_URL"),
        integrations=[
            DjangoIntegration(),
            CeleryIntegration(),
            RedisIntegration(),
        ],  # pragma: no cover
        send_default_pii=True,
    )  # pragma: no cover
# ---------------------------- SENTRY ----------------------------

# ---------------------------- CELERY ----------------------------
BROKER_URL = os.environ.get('REDIS_URL')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_RESULT_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Istanbul'
CELERY_ENABLE_UTC = False  # DEFAULT True
CELERYBEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_TASK_RESULT_EXPIRES = 60 * 60 * 24 * 2  # Seconds (2 days)
BROKER_POOL_LIMIT = 1
BROKER_HEARTBEAT = None
USER_AGENTS_CACHE = None
# ---------------------------- CELERY ----------------------------


# ---------------------------- POS AUTHORIZATION ----------------------------
APPLICATIONLOGINID = config('APPLICATIONLOGINID')
PASSWORD = config('PASSWORD')
PACKAGE_ID = config('PACKAGE_ID')
# ---------------------------- POS AUTHORIZATION ----------------------------

# ---------------------------- PAYNEOS CONFIG ----------------------------
PAYMENT_START_URL = config('PAYMENT_START_URL')
CALLBACK_URL = config('CALLBACK_URL')
ENROLL_USER_URL = config('ENROLL_USER_URL')
INACTIVE_USER_URL = config('INACTIVE_USER_URL')
WSP_TENANT_ID = config('WSP_TENANT_ID')
POS_AUTHORIZE_URL = config('POS_AUTHORIZE_URL')
WEB_PORTAL_URL = config('WEB_PORTAL_URL')
WEB_PORTAL_PASSWORD = config('WEB_PORTAL_PASSWORD')
# ---------------------------- PAYNEOS CONFIG ----------------------------

# ---------------------------- OTP CONFIG ----------------------------
OTP_LIFETIME = config('OTP_LIFETIME')
USERCODE = config('USERCODE')
OTP_PASSWORD = config('OTP_PASSWORD')
MSGHEADER = config('MSGHEADER')
SEND_OTP = config('SEND_OTP') == 'TRUE'
# ---------------------------- OTP CONFIG ----------------------------

# ---------------------------- KEY CONFIG ----------------------------
PRIVATE_KEY = config('PRIVATE_KEY')
ACCESS_KEY = config('ACCESS_KEY')
VEHICLE_TIME = config('VEHICLE_TIME')
IS_COMMISSION_STATIC = config('IS_COMMISSION_STATIC') == 'TRUE'
# ---------------------------- KEY CONFIG ----------------------------

# ---------------------------- AWS CONFIG ----------------------------
AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
# ---------------------------- AWS CONFIG ----------------------------
